# Multi-stage build for better caching and smaller final image
FROM node:lts-alpine AS base

# Install system dependencies in a separate layer
RUN apk add --no-cache \
    graphicsmagick \
    ghostscript \
    vips-dev \
    fftw-dev \
    build-base \
    libpng \
    libpng-dev \
    poppler-utils \
    python3 \
    make \
    g++

WORKDIR /app

# Dependencies stage - this layer will be cached unless package.json changes
FROM base AS deps
COPY package.json package-lock.json* ./
COPY prisma ./prisma/

# Install dependencies with npm ci for faster, reliable builds
RUN npm ci --only=production --ignore-scripts && \
    npm cache clean --force

# Development dependencies stage
FROM base AS dev-deps
COPY package.json package-lock.json* ./
RUN npm ci --ignore-scripts && \
    npm cache clean --force

# Build stage
FROM base AS builder
COPY package.json package-lock.json* ./
COPY prisma ./prisma/

# Copy dev dependencies
COPY --from=dev-deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Set build arguments
ARG OLLAMA_URL
ARG DOCLING_URL

# Set environment variables from build arguments
ENV OLLAMA_URL=${OLLAMA_URL:-http://ollama:11434}
ENV DOCLING_URL=${DOCLING_URL:-http://docling-serve:5001}
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Generate Prisma client and build
RUN npx prisma generate && \
    npm run build && \
    npm prune --production

# Production stage
FROM node:lts-alpine AS runner
LABEL authors="OpenHealth"

# Install only runtime system dependencies
RUN apk add --no-cache \
    graphicsmagick \
    ghostscript \
    vips \
    poppler-utils \
    dumb-init

WORKDIR /app

# Create non-root user
RUN adduser --disabled-password --gecos '' ohuser

# Copy built application
COPY --from=builder --chown=ohuser:ohuser /app/.next/standalone ./
COPY --from=builder --chown=ohuser:ohuser /app/.next/static ./.next/static
COPY --from=builder --chown=ohuser:ohuser /app/public ./public
COPY --from=builder --chown=ohuser:ohuser /app/prisma ./prisma
COPY --from=builder --chown=ohuser:ohuser /app/node_modules/.prisma ./node_modules/.prisma

# Set environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000

USER ohuser

EXPOSE 3000

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

CMD ["/bin/sh", "-c", "\
    echo 'Container starting...' && \
    echo 'Current OLLAMA_URL: $OLLAMA_URL' && \
    echo 'Current DOCLING_URL: $DOCLING_URL' && \
    sed -i 's|\"apiURL\": \"${OLLAMA_URL}\"|\"apiURL\": \"'$OLLAMA_URL'\"|g' prisma/data/llm-provider.json && \
    npx prisma db push --accept-data-loss && \
    npx prisma db seed && \
    echo 'Starting application...' && \
    node server.js"]