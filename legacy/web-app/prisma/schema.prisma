generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String?
  username     String   @unique
  password     String
  hasOnboarded Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  chatRooms               ChatRoom[]
  healthDataList          HealthData[]
  AssistantMode           AssistantMode[]
  LLMProvider             LLMProvider[]
  OAuth2Client            OAuth2Client[]
  OAuth2AuthorizationCode OAuth2AuthorizationCode[]
  OAuth2Token             OAuth2Token[]
}

model OAuth2Client {
  id                    String @id @default(cuid())
  userId                String @map("user_id")
  clientId              String @map("client_id")
  clientSecret          String @map("client_secret")
  clientIdIssuedAt      Int    @default(0) @map("client_id_issued_at")
  clientSecretExpiresAt Int    @default(0) @map("client_secret_expires_at")
  clientMetadata        String @map("client_metadata")
  user                  User   @relation(fields: [userId], references: [id])

  @@index([clientId])
}

model OAuth2AuthorizationCode {
  id                  String  @id @default(cuid())
  code                String  @unique @map("code")
  clientId            String  @map("client_id")
  redirectUri         String  @default("") @map("redirect_uri")
  responseType        String  @map("response_type")
  scope               String  @default("") @map("scope")
  nonce               String? @map("nonce")
  authTime            Int     @map("auth_time")
  codeChallenge       String? @map("code_challenge")
  codeChallengeMethod String? @map("code_challenge_method")
  userId              String  @map("user_id")
  user                User    @relation(fields: [userId], references: [id])
}

model OAuth2Token {
  id                    String  @id @default(cuid())
  clientId              String  @map("client_id")
  tokenType             String  @map("token_type")
  accessToken           String  @unique @map("access_token")
  refreshToken          String? @map("refresh_token")
  scope                 String  @default("") @map("scope")
  issuedAt              Int     @map("issued_at")
  accessTokenRevokedAt  Int     @default(0) @map("access_token_revoked_at")
  refreshTokenRevokedAt Int     @default(0) @map("refresh_token_revoked_at")
  expiresIn             Int     @default(0) @map("expires_in")
  userId                String  @map("user_id")
  user                  User    @relation(fields: [userId], references: [id])

  @@index([refreshToken])
}

model HealthData {
  id        String   @id @default(cuid())
  type      String // PERSONAL_INFO
  data      Json
  authorId  String?
  metadata  Json?
  filePath  String?
  fileType  String? // image/jpeg, image/png, application/pdf
  status    String   @default("COMPLETED") // PARSING, COMPLETED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User? @relation(fields: [authorId], references: [id])
}

model ChatRoom {
  id                 String   @id @default(cuid())
  name               String
  assistantModeId    String
  llmProviderId      String
  llmProviderModelId String?
  authorId           String?
  lastActivityAt     DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  assistantMode AssistantMode @relation(fields: [assistantModeId], references: [id])
  llmProvider   LLMProvider   @relation(fields: [llmProviderId], references: [id])
  chatMessages  ChatMessage[]
  author        User?         @relation(fields: [authorId], references: [id])
}

model ChatMessage {
  id         String   @id @default(cuid())
  content    String
  chatRoomId String
  role       ChatRole
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
}

model AssistantMode {
  id                 String                  @id @default(cuid())
  name               String
  description        String
  systemPrompt       String
  visibility         AssistantModeVisibility @default(PRIVATE)
  authorId           String?
  llmProviderId      String?
  llmProviderModelId String?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt

  contexts          AssistantModeContext[]
  chatRoom          ChatRoom[]
  llmProvider       LLMProvider?           @relation(fields: [llmProviderId], references: [id])
  author            User?                  @relation(fields: [authorId], references: [id])
  redditPostComment RedditPostComment[]
}

model AssistantModeContext {
  id              String   @id @default(cuid())
  assistantModeId String
  data            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  assistantMode AssistantMode @relation(fields: [assistantModeId], references: [id])
}

model LLMProvider {
  id         String   @id @default(cuid())
  providerId String
  name       String
  apiKey     String   @default("")
  apiURL     String
  order      Int
  authorId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  assistantModes AssistantMode[]
  author         User?           @relation(fields: [authorId], references: [id])
  chatRooms      ChatRoom[]
}

model RedditAccessToken {
  id          String   @id @default(cuid())
  username    String
  accessToken String
  tokenType   String
  expiresIn   Int
  scope       String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([username, expiresAt])
}

model RedditPost {
  id                      String   @id @default(cuid())
  postId                  String   @unique
  title                   String
  content                 String
  isMedicalAdviceRequired Boolean  @default(true)
  createdAt               DateTime
  updatedAt               DateTime

  redditPostComments RedditPostComment[]
}

model RedditPostComment {
  id              String   @id @default(cuid())
  postId          String
  commentId       String   @unique
  assistantModeId String
  content         String
  createdAt       DateTime
  updatedAt       DateTime

  redditPost    RedditPost    @relation(fields: [postId], references: [postId])
  assistantMode AssistantMode @relation(fields: [assistantModeId], references: [id])
}

enum ChatRole {
  USER
  ASSISTANT
}

enum AssistantModeVisibility {
  PUBLIC
  PRIVATE
}
